services:
  # Banco de origem (extraÃ§Ã£o)
  db:
    image: postgres:12
    container_name: db
    environment:
      POSTGRES_DB: northwind
      POSTGRES_USER: northwind_user
      POSTGRES_PASSWORD: thewindisblowing
    ports:
      - "15432:5432"
    volumes:
      - ./data/northwind.sql:/docker-entrypoint-initdb.d/northwind.sql
      - postgres_data:/var/lib/postgresql/data

  # Banco de destino (carga final)
  db-dest:
    image: postgres:12
    container_name: db-dest
    environment:
      POSTGRES_DB: dest_db
      POSTGRES_USER: dest_user
      POSTGRES_PASSWORD: dest_pass
    ports:
      - "15433:5432"
    volumes:
      - pgdata-dest:/var/lib/postgresql/data

  # ExtraÃ§Ã£o do banco via Embulk
  extract-postgres-embulk:
    build: ./extract-postgres-embulk
    container_name: extract-postgres-embulk
    volumes:
      - ./data:/data
      - ./extract-postgres-embulk:/app
    env_file:
      - .env
    depends_on:
      - db
    entrypoint: [ "sh", "-c", "while true; do sleep 3600; done" ]

  # ExtraÃ§Ã£o do CSV via Meltano
  extract-csv-meltano:
    build: ./extract-csv-meltano
    container_name: extract-csv-meltano
    volumes:
      - ./data:/data
      - ./extract-csv-meltano:/app
    env_file:
      - .env
    depends_on:
      - db
    entrypoint: [ "sh", "-c", "while true; do sleep 3600; done" ]

  # Carga JSONL via Meltano
  load-jsonl-meltano:
    build:
      context: ./load-jsonl-meltano
    container_name: load-jsonl-meltano
    env_file:
      - .env
    volumes:
      - ./data:/data
    environment:
      PG_HOST: ${PG_HOST}
      PG_PORT: ${PG_PORT}
      PG_DATABASE: ${PG_DATABASE}
      PG_USER: ${PG_USER}
      PG_PASSWORD: ${PG_PASSWORD}
    entrypoint: [ "sh", "-c", "while true; do sleep 3600; done" ]

  # Carga CSV via Embulk
  load-csv-embulk:
    build:
      context: ./load-csv-embulk
    container_name: load-csv-embulk
    volumes:
      - ./data:/app/data
      - ./load-csv-embulk:/app
    env_file: .env
    depends_on:
      - db-dest
    entrypoint: [ "sh", "-c", "while true; do sleep 3600; done" ]

  # OrquestraÃ§Ã£o com Airflow
  orchestrate-airflow:
    build: ./orchestrate-airflow
    container_name: orchestrate-airflow
    user: root  # ðŸ‘ˆ Permite usar docker exec dentro do container
    ports:
      - "8080:8080"
    volumes:
      - ./orchestrate-airflow/dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./Makefile:/opt/airflow/Makefile
      - /var/run/docker.sock:/var/run/docker.sock  # ðŸ‘ˆ Permite executar comandos docker dentro do container
    environment:
      AIRFLOW__CORE__EXECUTOR: SequentialExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: sqlite:////opt/airflow/airflow.db
    command: >
      bash -c "
        airflow db init &&
        airflow users create --username admin --password admin --firstname Admin --lastname User --role Admin --email admin@example.com &&
        exec airflow standalone
      "

volumes:
  postgres_data:
  pgdata-dest: